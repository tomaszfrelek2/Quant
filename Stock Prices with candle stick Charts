{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "prices = pd.read_csv('EURUSD60.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = prices[['Open','High','Low','Close']].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "daily = pd.read_csv('EURUSD1440.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "dailyData = daily[['Open','High','Low','Close']].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "aapl = pd.read_csv('AAPL.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "aaplData = aapl[['Date','Open','High','Low','Close']].values\n",
    "aaplOpen = aapl[['Open']].values\n",
    "aaplClose = aapl[['Close']].values\n",
    "aaplHigh = aapl[['High']].values\n",
    "aaplLow = aapl[['Low']].values\n",
    "aaplDate = aapl[['Date']].values\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createMA(data, maLength):\n",
    "    movingAverage = np.zeros(len(data))\n",
    "    total = 0\n",
    "    for bar in range(len(data)):\n",
    "        if (bar >= maLength - 1):\n",
    "            for previousBars in range(maLength):\n",
    "                total += data[bar - previousBars][3]\n",
    "            movingAverage[bar] = total / maLength\n",
    "            total = 0\n",
    "    return movingAverage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtest(data, param1, param2):\n",
    "    trades = []\n",
    "    start = 0;\n",
    "    end = 0;\n",
    "    longPosition = False\n",
    "    shortPosition = False\n",
    "    \n",
    "    #technical indicators\n",
    "    global fastMA\n",
    "    global slowMA\n",
    "    fastMA = createMA(data, param1)\n",
    "    slowMA = createMA(data, param2)\n",
    "    \n",
    "    for bar in range(len(data)):\n",
    "        \n",
    "        #close long position if exit criteria are met\n",
    "        if (longPosition):\n",
    "            a = checkExit(bar)\n",
    "            if (a[0]):\n",
    "                if (a[1] == 1):\n",
    "                    longPosition = False\n",
    "                    end = data[bar][3]\n",
    "                    trades.append(end - start)\n",
    "                    print(trades[len(trades) - 1])\n",
    "        \n",
    "        #close short position if exit criteria are met\n",
    "        if (shortPosition):\n",
    "            a = checkExit(bar)\n",
    "            if (a[0]):\n",
    "                if (a[1] == 0):\n",
    "                    shortPosition = False\n",
    "                    end = data[bar][3]\n",
    "                    trades.append(start - end)\n",
    "                    print(trades[len(trades) - 1])\n",
    "        \n",
    "        #check long and short entry criteria and enter position if criteria met\n",
    "        if not(longPosition) and not(shortPosition):\n",
    "            a = checkEntry(bar)\n",
    "            if (a[0]):\n",
    "                if (a[1] == 1):\n",
    "                    longPosition = True\n",
    "                    start = data[bar][3]\n",
    "                if (a[1] == 0):\n",
    "                    shortPosition = True\n",
    "                    start = data[bar][3]\n",
    "    \n",
    "    return trades"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def checkEntry(bar):\n",
    "    #long entry\n",
    "    if (fastMA[bar - 1] < slowMA[bar - 1] and fastMA[bar] > slowMA[bar]):\n",
    "        return (True, 1);\n",
    "    \n",
    "    #short entry\n",
    "    elif (fastMA[bar - 1] > slowMA[bar - 1] and fastMA[bar] < slowMA[bar]):\n",
    "        return (True, 0);\n",
    "    \n",
    "    #no entry\n",
    "    else:\n",
    "        return (False, 0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def checkExit(bar):\n",
    "    \n",
    "    #long exit\n",
    "    if (fastMA[bar - 1] > slowMA[bar - 1] and fastMA[bar] < slowMA[bar]):\n",
    "        return (True, 1);\n",
    "    \n",
    "    #short exit\n",
    "    elif (fastMA[bar - 1] < slowMA[bar - 1] and fastMA[bar] > slowMA[bar]):\n",
    "        return (True, 0);\n",
    "    \n",
    "    #no exit\n",
    "    else:\n",
    "        return (False, 0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.10602678500000007\n",
      "-0.020089285000000068\n",
      "-0.0703125\n",
      "-0.02399553599999993\n",
      "-0.002232142999999853\n",
      "-0.057477679000000004\n",
      "0.09263392799999992\n",
      "-0.06584821500000004\n",
      "-0.03459821500000004\n",
      "-0.06584821500000004\n",
      "-0.044642857000000036\n",
      "-0.02678571399999996\n",
      "-0.08928571399999996\n",
      "-0.05133928499999996\n",
      "0.597098215\n",
      "0.05125000000000002\n",
      "0.005892857000000029\n",
      "0.01660714299999999\n",
      "-0.04500000000000004\n",
      "-0.02303571400000004\n",
      "-0.029642857000000022\n",
      "-0.07857142899999997\n",
      "0.03517857100000005\n",
      "0.06267857100000002\n",
      "-0.03875000000000001\n",
      "-0.03517857099999999\n",
      "-0.04625000000000001\n",
      "-0.014821428999999997\n",
      "-0.017857142999999964\n",
      "-0.00607142799999999\n",
      "-0.020714285\n",
      "-0.01714285700000001\n",
      "0.003035713999999967\n",
      "-0.0030357140000000227\n",
      "0.15749999999999997\n",
      "-0.018750000000000044\n",
      "-0.01375000000000004\n",
      "0.0016071429999999776\n",
      "-0.003928570999999992\n",
      "-0.0071428570000000025\n",
      "-0.008571427999999992\n",
      "-0.016071428\n",
      "-0.007321428000000019\n",
      "-0.00660714200000001\n",
      "-0.0007142850000000367\n",
      "0.11142857199999995\n",
      "-0.02857142800000001\n",
      "-0.006964284999999959\n",
      "-0.004821427999999961\n",
      "0.06446428600000004\n",
      "-0.025178570999999983\n",
      "-0.009821428000000021\n",
      "-0.012500000000000011\n",
      "0.03999999999999998\n",
      "-0.05982142800000001\n",
      "-0.05625000000000002\n",
      "-0.058392857000000076\n",
      "0.875535715\n",
      "0.0478571430000001\n",
      "-0.11285714300000005\n",
      "-0.06321428600000001\n",
      "-0.06928571499999991\n",
      "-0.04499999999999993\n",
      "1.2285714289999998\n",
      "-0.12428571399999999\n",
      "-0.13071428499999982\n",
      "0.0735714289999998\n",
      "-0.17785714300000022\n",
      "-0.1007142860000001\n",
      "-0.08464285699999996\n",
      "0.13714285700000017\n",
      "0.7421428570000002\n",
      "-0.11678571400000015\n",
      "0.008214285999999849\n",
      "-0.13607142799999972\n",
      "-0.17499999999999982\n",
      "-0.11107142899999989\n",
      "1.331428571\n",
      "-0.21678571500000032\n",
      "1.4349999999999996\n",
      "1.1328571429999998\n",
      "1.3325000000000005\n",
      "-0.16392857099999958\n",
      "-0.2953571430000004\n",
      "-0.1275000000000004\n",
      "-0.3489285710000001\n",
      "2.389285714\n",
      "-0.18964285799999958\n",
      "-0.024285714999999986\n",
      "-0.22392857200000016\n",
      "-0.18000000000000016\n",
      "-0.2589285710000002\n",
      "-0.335714286\n",
      "3.4632142850000003\n",
      "-0.251428572\n",
      "0.09678571400000013\n",
      "-0.17178571399999942\n",
      "-0.5649999999999995\n",
      "-0.37464285699999955\n",
      "-0.03142857100000018\n",
      "-0.2614285710000006\n",
      "1.190357143\n",
      "-0.3939285720000001\n",
      "-0.3625000000000007\n",
      "-0.3957142850000004\n",
      "-0.20714285699999913\n",
      "-0.3978571429999995\n",
      "-0.24607142800000048\n",
      "-0.2575000000000003\n",
      "-0.34821428600000104\n",
      "-0.3064285710000014\n",
      "2.544285715999999\n",
      "-0.7296428600000002\n",
      "-0.21000000000000085\n",
      "-0.30178571000000076\n",
      "-0.7039285700000004\n",
      "-0.43607143000000015\n",
      "-0.4810714300000001\n",
      "-0.6210714300000006\n",
      "0.2503571400000002\n",
      "-0.6128571399999991\n",
      "0.03571428999999959\n",
      "-0.9175000000000004\n",
      "-0.5596428600000003\n",
      "-0.22607143000000107\n",
      "-0.010357139999999987\n",
      "-0.10571427999999905\n",
      "-0.4796428499999994\n",
      "-0.6557142799999998\n",
      "5.776071430000002\n",
      "-1.7757142899999998\n",
      "-1.0064285800000015\n",
      "-0.19964286000000087\n",
      "-0.4610714300000005\n",
      "-0.33928571999999946\n",
      "0.041428570000000775\n",
      "-0.35249999999999915\n",
      "1.5407142799999995\n",
      "6.235357139999998\n",
      "-0.7471428600000021\n",
      "0.12035713999999942\n",
      "-0.21535714000000006\n",
      "-0.34535714000000084\n",
      "-0.46000000000000085\n",
      "-0.3017857199999998\n",
      "0.4150000000000009\n",
      "-1.4471428499999988\n",
      "1.6385714300000025\n",
      "-0.744285719999997\n",
      "-1.8164285800000002\n",
      "-1.410357150000003\n",
      "-0.5300000000000011\n",
      "-0.19500000000000028\n",
      "-0.42571429000000194\n",
      "-0.292142860000002\n",
      "-0.33678572000000173\n",
      "-1.5832142900000008\n",
      "4.41\n",
      "-0.5124999999999993\n",
      "-0.8149999999999977\n",
      "-1.3624999999999972\n",
      "0.9400000000000013\n",
      "-1.4750000000000014\n",
      "-0.8300000000000018\n",
      "-0.942499999999999\n",
      "-0.9899999999999984\n",
      "-1.5425000000000004\n",
      "2.3599999999999994\n",
      "-0.9675000000000011\n",
      "-0.9024999999999999\n",
      "-0.21499999999999986\n",
      "0.03500000000000014\n",
      "-0.7349999999999959\n",
      "-0.38249999999999673\n",
      "-0.2925000000000004\n",
      "-0.3550000000000004\n",
      "-0.6125000000000007\n",
      "-1.115000000000002\n",
      "2.8475\n",
      "0.1025000000000027\n",
      "-0.7774999999999999\n",
      "-1.0274999999999999\n",
      "3.1075000000000017\n",
      "-0.7325000000000017\n",
      "0.2849999999999966\n",
      "3.727499999999999\n",
      "-0.42749999999999844\n",
      "8.322500000000002\n",
      "-0.8725000000000023\n",
      "0.8274999999999935\n",
      "-1.7700000000000031\n",
      "-1.0549999999999997\n",
      "-1.7000000000000028\n",
      "2.114999999999995\n",
      "-0.23000000000000398\n",
      "-0.8950000000000031\n",
      "0.11749999999999972\n",
      "0.417500000000004\n",
      "-0.5974999999999966\n",
      "-1.6799999999999997\n",
      "-2.792499999999997\n",
      "11.305000000000007\n",
      "-0.00999999999999801\n",
      "-1.5324999999999989\n",
      "-1.6774999999999949\n",
      "-1.9099999999999966\n",
      "12.142499999999998\n",
      "5.534999999999997\n",
      "-2.447499999999998\n",
      "0.14750000000000085\n",
      "-1.0975000000000037\n",
      "21.162499999999994\n",
      "0.9124999999999943\n",
      "-4.015000000000001\n",
      "-3.6500000000000057\n",
      "36.0975\n",
      "-7.25\n",
      "-0.9300000000000068\n",
      "-11.240000000000009\n",
      "-7.530000000000001\n",
      "-1.8199999999999932\n",
      "-2.6599999999999966\n",
      "-0.5600000000000023\n",
      "13.120000000000005\n",
      "-0.6500000000000057\n",
      "-7.590000000000018\n",
      "-6.86999999999999\n",
      "16.420000000000016\n",
      "-3.1999999999999886\n"
     ]
    }
   ],
   "source": [
    "z = backtest(aaplData, 3, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54.734464248999984"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "229"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max(z)\n",
    "plt.plot(z)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"\\nplt.plot([1,2,3,4,5],aaplHigh[0:5])\\nplt.legend(['first line'])\\nplt.ylabel('High Price')\\nplt.plot([1,2,3,4,5],aaplLow[0:5])\\nplt.legend(['first line'])\\n\\nplt.ylabel('Low Price')\\nplt.plot([1,2,3,4,5],aaplOpen[0:5],1)\\nplt.legend(['first line'])\\n\\nplt.ylabel('Open Price')\\nplt.plot([1,2,3,4,5],aaplClose[0:5],'o')\\nplt.legend(['hffh'])\\n\\nplt.ylabel('Close Price')\\n\\nplt.show()\\n\""
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#size = len(aaplData)\n",
    "'''\n",
    "plt.plot([1,2,3,4,5],aaplData[0:5],'o' )\n",
    "plt.legend(['Open','High','Low','Close'])\n",
    "plt.ylabel('some numbers')\n",
    "plt.show()\n",
    "'''\n",
    "plt.figure()\n",
    "\n",
    "width = .2\n",
    "width2 = .02\n",
    "smallaapl = aapl[1:10]\n",
    "#define up and down prices\n",
    "up = smallaapl[smallaapl['Close']>=smallaapl['Open']]\n",
    "down = smallaapl[smallaapl['Close']<smallaapl['Open']]\n",
    "\n",
    "#define colors to use\n",
    "col1 = 'lightgreen'\n",
    "col2 = 'crimson'\n",
    "#plot up prices\n",
    "plt.bar(up.index,up.Close-up.Open,width,bottom=up.Open,color=col1)\n",
    "plt.bar(up.index,up.High-up.Close,width2,bottom=up.Close,color=col1)\n",
    "plt.bar(up.index,up.Low-up.Open,width2,bottom=up.Open,color=col1)\n",
    "\n",
    "#plot down prices\n",
    "plt.bar(down.index,down.Close-down.Open,width,bottom=down.Open,color=col2)\n",
    "plt.bar(down.index,down.High-down.Open,width2,bottom=down.Open,color=col2)\n",
    "plt.bar(down.index,down.Low-down.Close,width2,bottom=down.Close,color=col2)\n",
    "x = [1,2,3,4,5,6,7,8,9]\n",
    "#rotate x-axis tick labels\n",
    "plt.xticks(x,smallaapl['Date'])\n",
    "\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "#display candlestick chart\n",
    "plt.show()\n",
    "\n",
    "'''\n",
    "plt.plot([1,2,3,4,5],aaplHigh[0:5])\n",
    "plt.legend(['first line'])\n",
    "plt.ylabel('High Price')\n",
    "plt.plot([1,2,3,4,5],aaplLow[0:5])\n",
    "plt.legend(['first line'])\n",
    "\n",
    "plt.ylabel('Low Price')\n",
    "plt.plot([1,2,3,4,5],aaplOpen[0:5],1)\n",
    "plt.legend(['first line'])\n",
    "\n",
    "plt.ylabel('Open Price')\n",
    "plt.plot([1,2,3,4,5],aaplClose[0:5],'o')\n",
    "plt.legend(['hffh'])\n",
    "\n",
    "plt.ylabel('Close Price')\n",
    "\n",
    "plt.show()\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#create figure\n",
    "plt.figure()\n",
    "#create DataFrame\n",
    "prices2 = pd.DataFrame({'open': [25, 22, 21, 19, 23, 21, 25, 29],\n",
    "                       'close': [24, 20, 17, 23, 22, 25, 29, 31],\n",
    "                       'high': [28, 27, 29, 25, 24, 26, 31, 37],\n",
    "                       'low': [22, 16, 14, 17, 19, 18, 22, 26]},\n",
    "                       index=pd.date_range(\"2021-01-01\", periods=8, freq=\"d\"))\n",
    "#define width of candlestick elements\n",
    "width = .2\n",
    "width2 = .02\n",
    "\n",
    "#define up and down prices\n",
    "up = prices2[prices2['close']>=prices2['open']]\n",
    "down = prices2[prices2['close']<prices2['open']]\n",
    "\n",
    "#define colors to use\n",
    "col1 = 'black'\n",
    "col2 = 'steelblue'\n",
    "\n",
    "#plot up prices\n",
    "plt.bar(up.index,up.close-up.open,width,bottom=up.open,color=col1)\n",
    "plt.bar(up.index,up.high-up.close,width2,bottom=up.close,color=col1)\n",
    "plt.bar(up.index,up.low-up.open,width2,bottom=up.open,color=col1)\n",
    "\n",
    "#plot down prices\n",
    "plt.bar(down.index,down.close-down.open,width,bottom=down.open,color=col2)\n",
    "plt.bar(down.index,down.high-down.open,width2,bottom=down.open,color=col2)\n",
    "plt.bar(down.index,down.low-down.close,width2,bottom=down.close,color=col2)\n",
    "\n",
    "#rotate x-axis tick labels\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "\n",
    "#display candlestick chart\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc-autonumbering": false
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
